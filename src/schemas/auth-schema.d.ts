/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth-service/login": {
    /** Метод для аутентификации пользователя в системе */
    post: operations["login"];
  };
  "/api/auth-service/refreshTokens": {
    /** Обновление токенов */
    post: operations["refreshTokens"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    loginPasswordRequest: {
      /** @description Логин для входа в систему */
      login: string;
      /** @description Пароль для входа в систему */
      password: string;
    };
    refreshTokenRequest: {
      /** @description Логин для входа в систему */
      refreshToken: string;
    };
    loginResponse: {
      tokens: components["schemas"]["ssoTokensResponse"];
      userInfo: components["schemas"]["userInfo"];
      /** @description список ролей */
      authorities: string[];
    };
    /** @description Токены */
    ssoTokensResponse: {
      /** @description accessToken */
      accessToken: string;
    };
    /** @description Информация по пользователю */
    userInfo: {
      /** @description имя пользователя */
      name: string;
      /** @description фамилия пользователя */
      surname: string;
      /** @description id пользователя */
      id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Метод для аутентификации пользователя в системе */
  login: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["loginPasswordRequest"];
      };
    };
    responses: {
      /** @description Аутентификация пройдена успешно */
      200: {
        content: {
          "application/json": components["schemas"]["loginResponse"];
        };
      };
      /** @description Логин/пароль некорректны */
      400: never;
      /** @description Внутренняя ошибка сервера */
      500: never;
    };
  };
  /** Обновление токенов */
  refreshTokens: {
    responses: {
      /** @description Аутентификация пройдена успешно */
      200: {
        content: {
          "application/json": components["schemas"]["loginResponse"];
        };
      };
      /** @description Refresh токен некорректен */
      400: never;
      /** @description Внутренняя ошибка сервера */
      500: never;
    };
  };
}
